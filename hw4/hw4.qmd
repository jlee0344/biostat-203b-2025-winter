---
title: "Biostat 203B Homework 4"
subtitle: "Due Mar 9 @ 11:59PM"
author: "Julie Lee"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information:
```{r}
sessionInfo()
```

Display my machine memory.
```{r}
memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:
```{r}
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
library(dbplyr)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database 

Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and `collect()` the tibble **only at the end of Q1.7**.

### Q1.1 Connect to BigQuery

Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do **not** ever add this token to your Git repository. If you do so, you will lose 50 points.

```{r}
# path to the service account token 
satoken <- "biostat-203b-2025-winter-4e58ec6e5579.json"
# BigQuery authentication using service account
bq_auth(path = satoken)
```

Connect to BigQuery database `mimiciv_3_1` in GCP (Google Cloud Platform), using the project billing account `biostat-203b-2025-winter`.
```{r}
# connect to the BigQuery database `biostat-203b-2025-mimiciv_3_1`
con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2025-winter",
    dataset = "mimiciv_3_1",
    billing = "biostat-203b-2025-winter"
)
con_bq
```

List all tables in the `mimiciv_3_1` database.
```{r}
dbListTables(con_bq)
```

### Q1.2 `icustays` data

Connect to the `icustays` table.
```{r}
# full ICU stays table
icustays_tble <- tbl(con_bq, "icustays") |>
  arrange(subject_id, hadm_id, stay_id) |>
  show_query() |>
  print(width = Inf)
```

### Q1.3 `admissions` data

Connect to the `admissions` table.
```{r}
admissions_tble <- tbl(con_bq, "admissions") |>
  arrange(subject_id, hadm_id) |>
  show_query() |>
  print(width = Inf)
```

### Q1.4 `patients` data

Connect to the `patients` table.
```{r}
patients_tble <- tbl(con_bq, "patients") |>
  arrange(subject_id) |>
  show_query() |>
  print(width = Inf)
```


### Q1.5 `labevents` data

Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW3. Only keep the last lab measurements (by `storetime`) before the ICU stay and pivot lab items to become variables/columns. Write all steps in _one_ chain of pipes.

```{r}
labevents_tble <- tbl(con_bq, "labevents") |>
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221, 51301, 50931)) |>
  arrange(subject_id, charttime, itemid) |>
  inner_join(tbl(con_bq, "icustays"), by = "subject_id") |>  
  filter(storetime < intime) |>
  mutate(valuenum = as.numeric(valuenum)) |>
  group_by(subject_id, stay_id, itemid) |>
  slice_max(order_by = storetime, n = 1, with_ties = FALSE) |>
  ungroup() |>
  select(subject_id, stay_id, itemid, valuenum) |>
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  rename(
    bicarbonate = `50882`,
    chloride = `50902`,
    creatinine = `50912`,
    glucose = `50931`,
    potassium = `50971`,
    sodium = `50983`,
    hematocrit = `51221`,
    wbc = `51301`,
  ) |> 
  select(subject_id, stay_id, bicarbonate, chloride, creatinine, 
         glucose, potassium, sodium, hematocrit, wbc) |>  
  arrange(subject_id, stay_id)
labevents_tble 
labevents_tble |> summarise(row_count = n())
```

### Q1.6 `chartevents` data

Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW3. Only keep the first chart events (by `storetime`) during ICU stay and pivot chart events to become variables/columns. Write all steps in _one_ chain of pipes. Similary to HW3, if a vital has multiple measurements at the first `storetime`, average them. 

**Solution ** 

```{r}
chartevents_tble <- tbl(con_bq, "chartevents") |>
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>  
  select(subject_id, stay_id, itemid, valuenum, storetime, charttime) |>  # Added charttime
  inner_join(
    tbl(con_bq, "icustays") |> select(subject_id, stay_id, intime, outtime),  
    by = "stay_id"
  ) |>  
  filter(storetime >= intime & storetime < outtime) |>  
  select(-subject_id_y) |>  
  rename(subject_id = subject_id_x) |>  
  group_by(subject_id, stay_id, itemid) |>  
  arrange(storetime) |>  
  slice_min(order_by = storetime, n = 1, with_ties = TRUE) |>  
  ungroup() |>  
  group_by(subject_id, stay_id, itemid) |>  
  summarize(valuenum_avg = mean(valuenum, na.rm = TRUE), .groups = "drop") |>  
  pivot_wider(
    names_from = itemid, values_from = valuenum_avg,
    names_prefix = "vital_"
  ) |>  
  rename(
    heart_rate = vital_220045,
    non_invasive_blood_pressure_systolic = vital_220179,
    non_invasive_blood_pressure_diastolic = vital_220180,
    temperature_fahrenheit = vital_223761,
    respiratory_rate = vital_220210
  ) |>  
  arrange(subject_id, stay_id)

chartevents_tble
chartevents_tble |> summarise(row_count = n())
```

### Q1.7 Put things together

This step is similar to Q7 of HW3. Using _one_ chain of pipes `|>` to perform following data wrangling steps: (i) start with the `icustays_tble`, (ii) merge in admissions and patients tables, (iii) keep adults only (age at ICU intime >= 18), (iv) merge in the labevents and chartevents tables, (v) `collect` the tibble, (vi) sort `subject_id`, `hadm_id`, `stay_id` and `print(width = Inf)`.

**Solution** 

Use the collect command only until question 7 

Creating the admit_hour variable (replicating what was in Homework #3) 

```{r}
admissions_tble <- admissions_tble  |>
  mutate(admit_hour = hour(admittime))
```

```{r}
mimic_icu_cohort_2 <- icustays_tble |>
  mutate(intime_year = year(as.Date(intime))) |>
  left_join(patients_tble |> 
              select(subject_id, anchor_age, anchor_year, anchor_year_group, dod, gender), 
            by = "subject_id") |>
  mutate(age_at_intime = anchor_age + (intime_year - anchor_year)) |>
  filter(age_at_intime >= 18) |>
  left_join(admissions_tble |> select(-admit_hour), 
            by = c("subject_id", "hadm_id")) |>
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  select(-intime_year) |> 
  collect() |>
  arrange(subject_id, hadm_id, stay_id) |>
  distinct() |>
  print(width = Inf)
```

### Q1.8 Preprocessing

Perform the following preprocessing steps. (i) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`. (ii) Collapse the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`. (iii) Create a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days. (iv) Summarize the data using `tbl_summary()`, stratified by `los_long`. Hint: `fct_lump_n` and `fct_collapse` from the `forcats` package are useful.

Hint: Below is a numerical summary of my tibble after preprocessing:

<iframe width=95% height="500" src="./mimic_icu_cohort_gtsummary.html"></iframe>

(1) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`

```{r}
# Step 1: Lump infrequent levels into "Other"
mimic_icu_cohort_2 <- mimic_icu_cohort_2 %>%
  mutate(
    first_careunit = fct_lump_n(first_careunit, n = 4, other_level = "Other"),
    last_careunit = fct_lump_n(last_careunit, n = 4, other_level = "Other"),
    admission_type = fct_lump_n(admission_type, n = 4, other_level = "Other"),
    admission_location = fct_lump_n(admission_location, n = 3, other_level = "Other"),
    discharge_location = fct_lump_n(discharge_location, n = 4, other_level = "Other")
  )
```

(2) Collapsing the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`

Examining the Unique Entries of Race and their Count: 

```{r}
mimic_icu_cohort_2 %>%
  count(race, sort = TRUE)
```

```{r}
mimic_icu_cohort_2 <- mimic_icu_cohort_2 %>%
  mutate(
    race = fct_collapse(
      race,
      ASIAN = c("ASIAN", "ASIAN - CHINESE", "ASIAN - KOREAN", "ASIAN - SOUTH EAST ASIAN", "ASIAN - ASIAN INDIAN" ),
      BLACK = c("BLACK/AFRICAN AMERICAN", "BLACK/CAPE VERDEAN", "BLACK/CARIBBEAN ISLAND", "BLACK/AFRICAN"),
      HISPANIC = c("HISPANIC/LATINO - PUERTO RICAN", "HISPANIC OR LATINO", "HISPANIC/LATINO - DOMINICAN", "HISPANIC/LATINO - CENTRAL AMERICAN", "HISPANIC/LATINO - GUATEMALAN", "HISPANIC/LATINO - COLUMBIAN", "HISPANIC/LATINO - CUBAN", "HISPANIC/LATINO - HONDURAN", "HISPANIC/LATINO - MEXICAN", "HISPANIC/LATINO - SALVADORAN"),
      WHITE = c("WHITE", "WHITE - OTHER EUROPEAN", "WHITE - RUSSIAN", "WHITE - EASTERN EUROPEAN", "WHITE - BRAZILIAN"),
      Other = c("UNKNOWN", "OTHER", "UNABLE TO OBTAIN", "MULTIPLE RACE/ETHNICITY", "PATIENT DECLINED TO ANSWER", "PORTUGUESE", "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER", "AMERICAN INDIAN/ALASKA NATIVE", "SOUTH AMERICAN" )
    )
  )
```

Double checking that races were collasped correctly: 
```{r}
mimic_icu_cohort_2 %>%
  count(race, sort = TRUE)
```

(3) Creating a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days

```{r}
mimic_icu_cohort_2 <- mimic_icu_cohort_2 %>%
  mutate(los_long = los >= 2)
```

(4) Summarizing the data using 'tbl_summary()', stratified by 'los_long' 

```{r}
summary_table <- mimic_icu_cohort_2 %>%
  select(first_careunit, last_careunit, los, admission_type, admission_location, discharge_location, insurance, language, marital_status, race, hospital_expire_flag, gender, dod, chloride, creatinine, sodium, potassium, glucose, hematocrit, wbc, bicarbonate, non_invasive_blood_pressure_systolic, non_invasive_blood_pressure_diastolic, respiratory_rate, temperature_fahrenheit, heart_rate, age_at_intime,  los_long) %>%
  tbl_summary(by = los_long)

summary_table
```

### Q1.9 Save the final tibble

Save the final tibble to an R data file `mimic_icu_cohort.rds` in the `mimiciv_shiny` folder.

**Note to self** Change the mimic_icu_cohort_2 to mimic_icu_cohort 

```{r}
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
# save the final tibble
mimic_icu_cohort_2 |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```

Close database connection and clear workspace.
```{r}
if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```

Although it is not a good practice to add big data files to Git, for grading purpose, please add `mimic_icu_cohort.rds` to your Git repository.

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should reside in the `mimiciv_shiny` folder. The app should contain at least two tabs. One tab provides easy access to the graphical and numerical summaries of variables (demographics, lab measurements, vitals) in the ICU cohort, using the `mimic_icu_cohort.rds` you curated in Q1. The other tab allows user to choose a specific patient in the cohort and display the patient's ADT and ICU stay information as we did in Q1 of HW3, by dynamically retrieving the patient's ADT and ICU stay information from BigQuery database. Again, do **not** ever add the BigQuery token to your Git repository. If you do so, you will lose 50 points.


```{r}
library(shiny)
```

```{r}

```


**Solution ** 

1. Summary: Variable Group and Variable 

Example: Demograhics and Marital Status where race is on the x-axis and each box colored in different races and there is count on the y-axis. 

2. Patient Information 


------------------------------------------FROM OLD HOMEWORK 

Consolidating Data for Patient Information graph: 


```{r}
#Old Homework 
patient_data <- read_csv("~/mimic/hosp/patients.csv.gz")
hospital_admissions <- read_csv("~/mimic/hosp/admissions.csv.gz")
patient_transfers <- read_csv("~/mimic/hosp/transfers.csv.gz")
lab_results <- read_parquet("./labevents_pq/part-0.parquet")
medical_procedures <- read_csv("~/mimic/hosp/procedures_icd.csv.gz")
patient_diagnoses <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz")
procedure_codes <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz")
diagnosis_codes <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz")
icu_stays <- read_csv("~/mimic/icu/icustays.csv.gz")

selected_patient <- 10063848
patient_record <- patient_data %>%
  filter(subject_id == !!selected_patient)
admission_details <- hospital_admissions %>%
  filter(subject_id == !!selected_patient)
transfer_details <- patient_transfers %>%
  filter(subject_id == !!selected_patient)
lab_details <- lab_results %>%
  filter(subject_id == !!selected_patient)
procedure_details <- medical_procedures %>%
  filter(subject_id == !!selected_patient)
diagnosis_details <- patient_diagnoses %>%
  filter(subject_id == !!selected_patient)
icu_details <- icu_stays %>%
  filter(subject_id == !!selected_patient)
```




--------------------------------
Reading New Data Sets (New Homework) 

```{r}
#New Homework 
patient_transfers_tble <- tbl(con_bq, "transfers") |>
  arrange(subject_id) |>
  show_query() |>
  print(width = Inf)
```

```{r}
procedure_codes_tble <- tbl(con_bq, "d_icd_procedures") |>       
  show_query() |> 
  print(width = Inf) 
```

```{r}
patient_diagnoses_tble <- tbl(con_bq, "diagnoses_icd") |>
  arrange(subject_id) |>
  show_query() |>
  print(width = Inf)
```

```{r}
medical_procedures_tble <- tbl(con_bq, "procedures_icd") |>
  arrange(subject_id) |>
  show_query() |>
  print(width = Inf)
```

```{r}
diagnoses_codes_tble <- tbl(con_bq, "d_icd_diagnoses") |>
  show_query() |>
  print(width = Inf)
```

```{r}
lab_results_tble <- tbl(con_bq, "labevents") |>
  arrange(subject_id) |>
  show_query() |>
  print(width = Inf)
```

------Start of Shiny App ------

patient_transfers <- read_csv("~/mimic/hosp/transfers.csv.gz")

New Data sets 

```{r}
#New Homework 
patients_tble 
admissions_tble 
icustays_tble
diagnoses_codes_tble 
lab_results_tble #named as lab results but for lab events
medical_procedures_tble
patient_diagnoses_tble
procedure_codes_tble
lab_results_tble 
patient_transfers_tble
```

```{r}
#New Homework - Matches old homework 
selected_patient <- 10063848
patient_record <- patients_tble |>
  filter(subject_id == !!selected_patient)
admission_details <- admissions_tble |>
  filter(subject_id == !!selected_patient)
transfer_details <- patient_transfers_tble |>
  filter(subject_id == !!selected_patient)
lab_details <- lab_results_tble |>
  filter(subject_id == !!selected_patient)
procedure_details <- medical_procedures_tble |>
  filter(subject_id == !!selected_patient)
diagnosis_details <- patient_diagnoses_tble |>
  filter(subject_id == !!selected_patient) |> arrange(hadm_id, seq_num)
icu_details <- icustays_tble |>
  filter(subject_id == !!selected_patient)

diagnosis_details 
```


```{r}
diagnosis_details <- diagnosis_details %>%
  mutate(icd_code = sql("CASE 
                          WHEN LENGTH(icd_code) < 5 THEN LPAD(icd_code, 5, '0') 
                          ELSE icd_code 
                        END")) %>%
  left_join(diagnoses_codes_tble, by = c("icd_code", "icd_version")) %>%
  collect() %>%   # Bring data into R first
  arrange(hadm_id)  # Now ordering will work in R


# Find column names that contain "long_title"
diagnosis_column <- grep("long_title", colnames(diagnosis_details), value = TRUE)
diagnosis_details
```


```{r}
if ("long_title" %in% diagnosis_column) {
  diagnosis_details <- rename(diagnosis_details, 
                              diagnosis_name = long_title)
} else if ("long_title.x" %in% diagnosis_column) {
  diagnosis_details <- rename(diagnosis_details, 
                              diagnosis_name = long_title.x)
} else if ("long_title.y" %in% diagnosis_column) {
  diagnosis_details <- rename(diagnosis_details, 
                              diagnosis_name = long_title.y)
} else {
  stop("No appropriate long_title column found in diagnosis_details")
}

diagnosis_details
```


```{r}

top_conditions <- diagnosis_details %>%
  filter(!is.na(diagnosis_name)) %>%  # Remove NA values
  group_by(diagnosis_name) %>%  
  summarize(n = n(), .groups = "drop") %>%  # Count occurrences
  arrange(desc(n)) %>%  # Sort in descending order
  slice_head(n = 3) %>%  # Select top 3 rows
  pull(diagnosis_name)  # Extract names

# Format output as text
top_conditions_text <- if (length(top_conditions) > 0) {
  paste(top_conditions, collapse = "\n")
} else { "" }

top_conditions
```


#Edit from here: 
#You need to fix this: 

```{r}
patient_summary_text <- patient_record %>%
  mutate(
    summary = str_squish(paste0(
      "Patient ", id, ", ",
      ifelse(is.na(gender), "", paste0(gender, ", ")),
      ifelse(is.na(anchor_age), "", paste0(anchor_age, " years old, ")),
      ifelse(is.na(race), "", race)
    ))
  ) %>%
  pull(summary)

print(patient_summary_text)

```

```{r}
# Convert datetime fields to SQL-compatible format and filter out NULL `outtime`
transfer_details <- transfer_details %>%
  mutate(
    intime = sql("CAST(intime AS DATETIME)"),
    outtime = sql("CAST(outtime AS DATETIME)")
  ) %>%
  filter(!is.na(outtime)) %>%
  arrange(hadm_id)  # Arrange by `hadm_id` before collecting

# Collect the data into R if further local processing is needed
transfer_details <- transfer_details %>% collect()

# Print the final dataframe
transfer_details
```


```{r}
lab_details <- lab_details %>%
  mutate(chartdate = sql("CAST(charttime AS DATETIME)"))
```


```{r}

procedure_details <- procedure_details %>%
  mutate(chartdate = sql("CAST(chartdate AS DATETIME)")) %>%
  left_join(procedure_codes_tble, by = c("icd_code", "icd_version")) 

procedure_name_column <- grep("long_title", colnames(procedure_details), value = TRUE)

if (length(procedure_name_column) > 1) {
  procedure_details <- procedure_details %>%
    select(-all_of(procedure_name_column[-1])) %>%  # Keep only the first match
    rename(procedure_name = !!procedure_name_column[1])  # Rename first match
} else if (length(procedure_name_column) == 1) {
  procedure_details <- procedure_details %>%
    rename(procedure_name = !!procedure_name_column)
}

procedure_details <- procedure_details %>% collect()
procedure_details

```


```{r}
# Filter procedure details for valid values
procedure_details <- procedure_details %>%
  filter(!is.na(procedure_name))
```


```{r}
# Unique care units and procedure names
distinct_care_units <- transfer_details %>% pull(careunit) %>% unique()
distinct_procedures <- procedure_details %>% pull(procedure_name) %>% unique()
```


```{r}
# Define color palette for care units
care_unit_palette <- setNames(
  RColorBrewer::brewer.pal(n = min(length(distinct_care_units), 9), name = "Set1"),
  distinct_care_units
)

# Convert careunit to factor
transfer_details <- transfer_details %>%
  mutate(careunit = factor(careunit, levels = distinct_care_units))

# Define shape mappings for procedures
procedure_shapes <- setNames(seq(15, 15 + length(distinct_procedures) - 1), distinct_procedures)

# Convert procedure names to factor
procedure_details <- procedure_details %>%
  mutate(procedure_name = factor(procedure_name, levels = distinct_procedures))
```


```{r}
# Create timeline plot (unchanged)
patient_timeline <- ggplot() +
  geom_segment(
    data = transfer_details,
    aes(x = intime, xend = outtime, y = "ADT", yend = "ADT", color = careunit),
    linewidth = 3
  ) +
  geom_point(
    data = lab_details,
    aes(x = chartdate, y = "Lab"), shape = 3, size = 3
  ) +
  geom_point(
    data = procedure_details,
    aes(x = chartdate, y = "Procedure", shape = procedure_name),
    size = 5
  ) +
  scale_color_manual(values = care_unit_palette) +
  scale_shape_manual(values = procedure_shapes, drop = FALSE) +
  scale_y_discrete(limits = c("Procedure", "Lab", "ADT")) +
  theme_minimal() +
  labs(
    title = patient_summary_text,
    subtitle = top_conditions_text,
    x = "Calendar Time",
    y = NULL,
    color = "Care Unit",
    shape = "Procedure"
  ) +
  guides(
    color = guide_legend(order = 1, title.position = "top"),
    shape = guide_legend(order = 2, title.position = "top")
  ) +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.box.just = "center",
    legend.spacing.y = unit(0.5, "cm"),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10)
  )

# Print the timeline plot
print(patient_timeline)

```


